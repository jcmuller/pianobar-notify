#!/usr/bin/env perl

use common::sense;
use feature 'switch';

# {{{ POD

=head1 AUTHOR

(c) 2010 Juan C. Muller E<lt>jcmuller@gmail.comE<gt>. All rights reserved.

=head1 DESCRIPTION

Get the data from L<pianobar|http://github.com/jcmuller/pianobar> and display a
notification window using L<Growl|http://growl.info>.

=head1 VERSION

v0.1

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

=head1 USAGE

pianobar-notify-osx [options]

    -m, --man       Show man page
    -h, --help      Show this text

=cut

# }}}

# {{{ Defaults Class
package Defaults;

# {{{ base_path
sub base_path
{
	my $base_path = "${ENV{HOME}}/.covers";
	return $base_path;
}
# }}}
# }}}

# {{{ PianoBarNotify Class
package PianoBarNotify;

# {{{ Libraries
use FileHandle;
use Getopt::Long;
use Growl::GNTP;
use HTML::Entities qw();
use JSON;
use Pod::Usage;
# }}}
# {{{ new
# Common constructor
sub new
{
	my ($proto, %args) = @_;
	my $class = ref $proto || $proto;
	my $self = {};
	bless $self, $class;
	$self->_initialize(%args);
	return $self;
}
# }}}
# {{{ notify
sub notify
{
	my ($self) = @_;

	# Declare cache vars

	my (
		$album,
		$artist,
		$cover,
		$rating,
		$station_name,
		$status,
		$title,
		$action
	) = $self->_get_status;

	if ($artist and $title)
	{
		$self->_display(
			album        => $album,
			artist       => $artist,
			cover        => $cover,
			rating       => $rating,
			station_name => $station_name,
			status       => $status,
			title        => $title,
			action       => $action,
		);
	}
}
# }}}
# {{{ _initialize
sub _initialize
{
	my ($self, %args) = @_;

	$self->_collect_arguments;
	$self->{_notification} = Growl::GNTP->new(
		AppName => 'PianobarNotify',
		AppIcon => 'http://rocketdock.com/images/screenshots/PandoraIcon.png'
	);
	$self->{_notification}->register([ { Name => 'songInfo' } ]);
}
# }}}
# {{{ _display
sub _display
{
	my ($self, %body_args) = @_;

	# Set notification summary line
	my $summary = "Pianobar - [$body_args{status}]";

	# Construct notification body text
	my $body = $self->_get_body(%body_args);

	# Display the notification
	$self->{_notification}->notify(
		Event   => 'songInfo',
		Title   => $summary,
		Message => $body,
		Icon    => $body_args{cover},
	);
}
# {{{ _collect_arguments
sub _collect_arguments
{
	my ($self) = @_;

	my %arguments;

	GetOptions(\%arguments,
		'help',
		'man',
	);

	$self->{arguments} = \%arguments;

	if ($self->{arguments}{help})
	{
		pod2usage(1);
	}
	elsif ($self->{arguments}{man})
	{
		pod2usage(-verbose => 2);
	}
}
# }}}
# {{{ _get_status
sub _get_status
{
	my ($self) = @_;

	# Query it
	my $artist       = '';
	my $title        = '';
	my $album        = '';
	my $cover        = '';
	my $station_name = '';
	my $status       = '';
	my $rating       = '';

	my $action = shift @ARGV;

	my @stations;

	# Cache the status object
	if ($action =~ /song(?:start|explain|love|ban)/)
	{
		while (<STDIN>)
		{
			$artist = $1 if (/artist=(.+)$/);
			$title  = $1 if (/title=(.+)$/);
			$album  = $1 if (/album=(.+)$/);
			$cover  = $1 if (/coverArt=(.+)$/);
			$rating = $1 if (/rating=(.+)$/);
			$station_name  = $1 if (/stationName=(.+)$/);

			# station1=Andrea Bocelli Radio
			if (/station(\d+)=(.+)$/)
			{
				my $name = $2;
				$name .= " [playing]" if $station_name eq $2;
				push @stations, "$1. $name";
			}

			given ($action)
			{
				when (/start|explain/) { $status = 'Playing'; }
				when (/love/)          { $status = 'Thumbs Up' }
				when (/ban/)           { $status = 'Thumbs Down' }
			}
		}
	}

	my $stations_file = '/tmp/pianobar_stations';
	if (my $sfh = FileHandle->new(">$stations_file"))
	{
		$sfh->print(join "\n", @stations);
		$sfh->close;
	}
	else
	{
		die "Couldn't open $stations_file for writing: $!";
	}

	my $current_song_as_data = '/tmp/current_song_data';
	if (my $sfh = FileHandle->new(">$current_song_as_data"))
	{
		my $love = "";
		given ($rating)
		{
			when (1) { $love = ' <3' }
			when (2) { $love = ' </3' }
		}

		my $json = JSON->new->allow_nonref;
		my $jsonString = $json->encode(
			{
				artist => $artist,
				album => $album,
				title => $title,
				rating => $rating,
				love => $love,
				current_song_string => sprintf("%s - %s (%s)%s", $artist, $title, $album, $love),
				station_name => $station_name
			}
		);
		$sfh->print($jsonString);
		$sfh->close;
	}
	else
	{
		die "Couldn't open $current_song_as_data for writing: $!";
	}


	return
		$album,
		$artist,
		$cover,
		$rating,
		$station_name,
		$status,
		$title,
		$action;
}
# }}}
# {{{ _get_body
# Get the notification body contents. It is in its own method so that it can be
# overridden. For that to happen, the architecture of this program would need
# to change slightly. Not a lot.
sub _get_body
{
	my ($self, %args) = @_;

	my $body = << "FINI";
$args{artist} - $args{title}
$args{album}
On: $args{station_name}
FINI

	my $rat;

	given ($args{rating})
	{
		when (1) { $rat = 'Thumbs Up' }
		when (2) { $rat = 'Thumbs Down' }
	}

	if ($rat)
	{
		$body .= << "FINI";
$rat
FINI
	}

	$self->_clean_up(\$body);

	return $body;
}
# }}}
# {{{ _clean_up
# Get rid of characters that break html.
sub _clean_up
{
	my ($self, $str) = @_;

	#$$str = HTML::Entities::encode($$str);
	# Reenable HTML tags.
	#$$str =~ s@&lt;(.+?)&gt;@<$1>@g;
}
# }}}
# }}}

# {{{ main
package Main;

sub main
{
	PianoBarNotify->new->notify;
}

main();

# }}}

# vim:set foldmethod=marker noexpandtab sw=4 ts=4:nolist:
